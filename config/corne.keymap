#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

/ {
  combos { compatible = "zmk,combos"; };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <2 2>;
      then-layer = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &none  &kp Q           &kp W           &kp E         &kp R         &kp T        &kp Y    &kp U            &kp I        &kp O       &kp P                      &kp BSLH
        &none  &mt LEFT_ALT A  &mt LEFT_GUI S  &mt LCTRL D   &mt LSHIFT F  &kp G        &kp H    &mt LSHIFT J     &mt LCTRL K  &mt LGUI L  &mt LEFT_ALT SINGLE_QUOTE  &kp APOS
        &none  &kp Z           &kp X           &kp C         &kp V         &kp B        &kp N    &kp M            &kp COMMA    &kp DOT     &kp FSLH                   &kp ESC
                                               &lt 2 ESCAPE  &lt 3 SPACE   &lt 1 TAB    &kp RET  &lt 0 BACKSPACE  &kp DELETE
      >;
    };

    num {
      bindings = <
        &trans  &kp N1    &kp N2    &kp N3     &kp N4     &kp N5    &kp N6     &kp N7  &kp N8     &kp N9  &kp N0     &trans
        &trans  &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &trans    &kp EQUAL  &kp N4  &kp N5     &kp N6  &kp SEMI   &trans
        &trans  &trans    &trans    &trans     &trans     &trans    &kp BSLH   &kp N1  &kp N2     &kp N3  &kp GRAVE  &trans
                                    &trans     &trans     &trans    &kp DOT    &kp N0  &kp MINUS
      >;
    };

    sym {
      bindings = <
        &trans  &kp EXCL  &kp AT    &kp HASH   &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR  &trans
        &trans  &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &trans       &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
        &trans  &trans    &trans    &trans     &trans     &trans       &kp UNDER  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &trans       &trans     &trans     &trans
      >;
    };

    nav {
      bindings = <
        &trans  &trans    &trans    &trans     &trans     &trans    &kp K_REDO  &kp K_PASTE  &kp K_COPY     &kp K_CUT    &kp K_UNDO    &kp LC(U)
        &trans  &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &trans    &kp LEFT    &kp DOWN     &kp UP         &kp RIGHT    &kp CAPSLOCK  &kp LC(D)
        &trans  &trans    &trans    &trans     &trans     &trans    &kp INS     &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP  &kp END       &trans
                                    &trans     &trans     &trans    &kp ENTER   &kp BSPC     &kp DEL
      >;
    };

    fun {
      bindings = <
        &trans  &kp F12  &kp F7  &kp F8      &kp F9     &kp PRINTSCREEN    &trans  &trans     &trans     &trans    &trans    &trans
        &trans  &kp F11  &kp F4  &kp F5      &kp F6     &kp SCROLLLOCK     &trans  &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT  &trans
        &trans  &kp F10  &kp F1  &kp F2      &kp F3     &kp PAUSE_BREAK    &trans  &trans     &trans     &trans    &trans    &trans
                                 &kp K_MENU  &kp SPACE  &kp TAB            &trans  &trans     &trans
      >;
    };

    media {
      bindings = <
        &trans  &kp V           &kp S              &kp H            &kp M             &kp R         &trans  &trans     &trans     &trans    &trans    &trans
        &trans  &kp K_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_NEXT        &kp E         &trans  &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT  &trans
        &trans  &kp N3          &kp NUMBER_2       &kp NUMBER_1     &kp NUMBER_0      &kp O         &trans  &trans     &trans     &trans    &trans    &trans
                                                   &kp K_STOP       &kp K_PLAY_PAUSE  &kp K_MUTE    &trans  &trans     &trans
      >;
    };
  };
};

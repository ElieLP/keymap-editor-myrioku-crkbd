#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk { /delete-property/ ignore-modifiers; };

/ {
  combos {
    compatible = "zmk,combos";

    tab {
      key-positions = <2 3>;
      bindings = <&kp TAB>;
    };

    ctrl {
      key-positions = <26 27>;
      bindings = <&kp LCTRL>;
    };

    cmd {
      key-positions = <37 38>;
      bindings = <&kp LCMD>;
    };

    alt {
      key-positions = <39 40>;
      bindings = <&kp LEFT_ALT>;
    };

    shift {
      key-positions = <8 9>;
      bindings = <&kp LSHIFT>;
    };

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    delete {
      key-positions = <32 33>;
      bindings = <&kp DEL>;
    };
  };

  macros {
    greeting: greeting {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "greeting";
      bindings = <&kp H &kp E &kp L &kp L &kp O>;
    };

    rgblayer: rgb_layer {
      compatible = "zmk,behavior-macro-two-param";
      #binding-cells = <2>;
      label = "MOMENTARY_LAYER_WITH_RGB_COLOR";
      bindings
        = <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER &macro_param_1to1>
        , <&macro_press>
        , <&mo MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &mo MACRO_PLACEHOLDER>
        , <&macro_tap>
        , <&rgb_ug RGB_TOG>
        ;
    };

    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };

    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };

    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };

    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };

    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };

    volknob: volume_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "ENCODER_VOLUME_KNOB";
      #sensor-binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
    };

    rgbknob: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ENCODER_RGB";
      #sensor-binding-cells = <2>;
      bindings = <&rgb_ug>, <&rgb_ug>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <2 2>;
      then-layer = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &none  &kp Q            &kp W            &kp E         &kp R              &kp T        &kp Y    &kp U              &kp I         &kp O            &kp P               &kp BSLH
        &none  &hml LEFT_ALT A  &hml LEFT_GUI S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G        &kp H    &hmr LEFT_SHIFT J  &hmr LCTRL K  &hmr LEFT_GUI L  &hmr LEFT_ALT SEMI  &kp APOS
        &none  &kp Z            &kp X            &kp C         &kp V              &kp B        &kp N    &kp M              &kp COMMA     &kp DOT          &kp FSLH            &kp ESC
                                                 &lt 2 ESCAPE  &lt 3 SPACE        &lt 1 TAB    &kp RET  &lt 0 BACKSPACE    &kp DELETE
      >;
    };

    num {
      bindings = <
        &trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6     &kp N7  &kp N8     &kp N9  &kp N0     &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &kp EQUAL  &kp N4  &kp N5     &kp N6  &kp SEMI   &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &kp BSLH   &kp N1  &kp N2     &kp N3  &kp GRAVE  &trans
                                &trans  &trans  &trans    &kp DOT    &kp N0  &kp MINUS
      >;
    };

    sym {
      bindings = <
        &trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR  &trans
        &trans  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
        &trans  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                                  &trans    &trans    &trans       &trans     &trans     &trans
      >;
    };

    nav {
      bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &kp K_REDO  &kp K_PASTE  &kp K_COPY     &kp K_CUT    &kp K_UNDO    &kp LC(U)
        &trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT    &kp DOWN     &kp UP         &kp RIGHT    &kp CAPSLOCK  &kp LC(D)
        &trans  &trans  &trans  &trans  &trans  &trans    &kp INS     &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP  &kp END       &trans
                                &trans  &trans  &trans    &kp ENTER   &kp BSPC     &kp DEL
      >;
    };

    fun {
      bindings = <
        &trans  &kp F12  &kp F7  &kp F8      &kp F9     &kp PRINTSCREEN    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp F11  &kp F4  &kp F5      &kp F6     &kp SCROLLLOCK     &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp F10  &kp F1  &kp F2      &kp F3     &kp PAUSE_BREAK    &trans  &trans  &trans  &trans  &trans  &trans
                                 &kp K_MENU  &kp SPACE  &kp TAB            &trans  &trans  &trans
      >;
    };

    media {
      bindings = <
        &trans  &kp V           &kp S              &kp H            &kp M             &kp R         &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp K_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_NEXT        &kp E         &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp N3          &kp NUMBER_2       &kp NUMBER_1     &kp NUMBER_0      &kp O         &trans  &trans  &trans  &trans  &trans  &trans
                                                   &kp K_STOP       &kp K_PLAY_PAUSE  &kp K_MUTE    &trans  &trans  &trans
      >;
    };

    layer_8 {
      bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    layer_9 {
      bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };
  };
};
